using System.Text.Json;
using System.Text.Json.Serialization;

namespace BrowserforgeDotnet.Fingerprints;

/// <summary>
/// Complete browser fingerprint containing all fingerprinting components
/// </summary>
/// <param name="Screen">Screen dimensions and properties</param>
/// <param name="Navigator">Browser navigator properties</param>
/// <param name="Headers">HTTP headers</param>
/// <param name="VideoCodecs">Supported video codecs</param>
/// <param name="AudioCodecs">Supported audio codecs</param>
/// <param name="PluginsData">Browser plugins information</param>
/// <param name="Battery">Battery status information</param>
/// <param name="VideoCard">Graphics card information</param>
/// <param name="MultimediaDevices">Available multimedia devices</param>
/// <param name="Fonts">Available system fonts</param>
/// <param name="MockWebRTC">Whether WebRTC should be mocked</param>
/// <param name="Slim">Whether slim mode is enabled</param>
public record Fingerprint(
    [property: JsonPropertyName("screen")] ScreenFingerprint Screen,
    [property: JsonPropertyName("navigator")] NavigatorFingerprint Navigator,
    [property: JsonPropertyName("headers")] Dictionary<string, string> Headers,
    [property: JsonPropertyName("videoCodecs")] Dictionary<string, string> VideoCodecs,
    [property: JsonPropertyName("audioCodecs")] Dictionary<string, string> AudioCodecs,
    [property: JsonPropertyName("pluginsData")] Dictionary<string, string> PluginsData,
    [property: JsonPropertyName("battery")] Dictionary<string, object>? Battery,
    [property: JsonPropertyName("videoCard")] VideoCard? VideoCard,
    [property: JsonPropertyName("multimediaDevices")] List<string> MultimediaDevices,
    [property: JsonPropertyName("fonts")] List<string> Fonts,
    [property: JsonPropertyName("mockWebRTC")] bool? MockWebRTC,
    [property: JsonPropertyName("slim")] bool? Slim
)
{
    /// <summary>
    /// Serializes the fingerprint to a JSON string
    /// </summary>
    /// <param name="options">JSON serialization options</param>
    /// <returns>JSON representation of the fingerprint</returns>
    public string ToJson(JsonSerializerOptions? options = null)
    {
        options ??= new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = false,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals
        };

        return JsonSerializer.Serialize(this, options);
    }

    /// <summary>
    /// Serializes the fingerprint to a formatted JSON string
    /// </summary>
    /// <returns>Formatted JSON representation of the fingerprint</returns>
    public string ToJsonFormatted()
    {
        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals
        };

        return JsonSerializer.Serialize(this, options);
    }

    /// <summary>
    /// Creates a Fingerprint instance from a JSON string
    /// </summary>
    /// <param name="json">JSON string representation</param>
    /// <param name="options">JSON deserialization options</param>
    /// <returns>Fingerprint instance</returns>
    public static Fingerprint FromJson(string json, JsonSerializerOptions? options = null)
    {
        options ??= new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            PropertyNameCaseInsensitive = true,
            NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals
        };

        var fingerprint = JsonSerializer.Deserialize<Fingerprint>(json, options);
        return fingerprint ?? throw new JsonException("Failed to deserialize fingerprint from JSON");
    }

    /// <summary>
    /// Creates a Fingerprint instance from dictionary data generated by the Bayesian network
    /// </summary>
    /// <param name="fingerprintData">Dictionary containing fingerprint data</param>
    /// <param name="headers">HTTP headers</param>
    /// <param name="mockWebRTC">Whether WebRTC should be mocked</param>
    /// <param name="slim">Whether slim mode is enabled</param>
    /// <returns>Fingerprint instance</returns>
    public static Fingerprint FromDictionary(
        Dictionary<string, object> fingerprintData,
        Dictionary<string, string> headers,
        bool? mockWebRTC = null,
        bool? slim = null)
    {
        // Extract screen data
        var screenData = GetDictionaryValue(fingerprintData, "screen") ?? new Dictionary<string, object>();
        var screen = ScreenFingerprint.FromDictionary(screenData);

        // Extract navigator data - collect all navigator-related fields
        var navigatorData = new Dictionary<string, object>();
        var navigatorFields = new[]
        {
            "userAgent", "userAgentData", "doNotTrack", "appCodeName", "appName", "appVersion",
            "oscpu", "webdriver", "platform", "deviceMemory", "product", "productSub",
            "vendor", "vendorSub", "extraProperties", "hardwareConcurrency", "languages",
            "language", "maxTouchPoints"
        };

        foreach (var field in navigatorFields)
        {
            if (fingerprintData.TryGetValue(field, out var value))
            {
                navigatorData[field] = value;
            }
        }

        var navigator = NavigatorFingerprint.FromDictionary(navigatorData);

        // Extract video card data
        VideoCard? videoCard = null;
        if (fingerprintData.TryGetValue("videoCard", out var videoCardObj) && videoCardObj != null)
        {
            var videoCardData = videoCardObj as Dictionary<string, object> ?? new Dictionary<string, object>();
            videoCard = VideoCard.FromDictionary(videoCardData);
        }

        // Extract other data with fallbacks
        var videoCodecs = GetDictionaryStringValue(fingerprintData, "videoCodecs") ?? FingerprintConstants.VideoCodecs;
        var audioCodecs = GetDictionaryStringValue(fingerprintData, "audioCodecs") ?? FingerprintConstants.AudioCodecs;
        var pluginsData = GetDictionaryStringValue(fingerprintData, "pluginsData") ?? FingerprintConstants.CommonPlugins;
        var battery = GetDictionaryValue(fingerprintData, "battery");
        var multimediaDevices = GetListValue(fingerprintData, "multimediaDevices") ?? FingerprintConstants.MultimediaDevices;
        var fonts = GetListValue(fingerprintData, "fonts") ?? FingerprintConstants.CommonFonts;

        return new Fingerprint(
            Screen: screen,
            Navigator: navigator,
            Headers: headers,
            VideoCodecs: videoCodecs,
            AudioCodecs: audioCodecs,
            PluginsData: pluginsData,
            Battery: battery,
            VideoCard: videoCard,
            MultimediaDevices: multimediaDevices,
            Fonts: fonts,
            MockWebRTC: mockWebRTC,
            Slim: slim
        );
    }

    /// <summary>
    /// Creates a basic fingerprint for testing purposes
    /// </summary>
    /// <param name="userAgent">User agent string</param>
    /// <param name="width">Screen width</param>
    /// <param name="height">Screen height</param>
    /// <returns>Basic fingerprint instance</returns>
    public static Fingerprint CreateBasic(string userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36", int width = 1920, int height = 1080)
    {
        var screen = ScreenFingerprint.Create(width, height);
        var navigator = NavigatorFingerprint.CreateChrome(userAgent);
        var headers = new Dictionary<string, string>
        {
            { "User-Agent", userAgent },
            { "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" },
            { "Accept-Language", "en-US,en;q=0.5" }
        };

        return new Fingerprint(
            Screen: screen,
            Navigator: navigator,
            Headers: headers,
            VideoCodecs: FingerprintConstants.VideoCodecs,
            AudioCodecs: FingerprintConstants.AudioCodecs,
            PluginsData: FingerprintConstants.CommonPlugins,
            Battery: FingerprintConstants.DefaultBatteryInfo,
            VideoCard: VideoCard.CreateDefault(),
            MultimediaDevices: FingerprintConstants.MultimediaDevices,
            Fonts: FingerprintConstants.CommonFonts,
            MockWebRTC: false,
            Slim: false
        );
    }

    private static Dictionary<string, object>? GetDictionaryValue(Dictionary<string, object> data, string key)
    {
        if (!data.TryGetValue(key, out var value))
            return null;

        return value as Dictionary<string, object>;
    }

    private static Dictionary<string, string>? GetDictionaryStringValue(Dictionary<string, object> data, string key)
    {
        if (!data.TryGetValue(key, out var value))
            return null;

        if (value is Dictionary<string, string> stringDict)
            return stringDict;

        if (value is Dictionary<string, object> objectDict)
        {
            return objectDict.ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value?.ToString() ?? string.Empty
            );
        }

        return null;
    }

    private static List<string>? GetListValue(Dictionary<string, object> data, string key)
    {
        if (!data.TryGetValue(key, out var value))
            return null;

        return value switch
        {
            List<string> stringList => stringList,
            List<object> objectList => objectList.Select(o => o?.ToString() ?? string.Empty).ToList(),
            string[] stringArray => stringArray.ToList(),
            object[] objectArray => objectArray.Select(o => o?.ToString() ?? string.Empty).ToList(),
            _ => null
        };
    }
}